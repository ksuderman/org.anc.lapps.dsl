#!/usr/bin/env bash
set -eu -o pipefail

# VERSION is set by sed during the build.
VERSION=__VERSION__

# Find original directory of bash script, resovling symlinks
# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in/246128#246128
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
JAR=${DIR}/lsd-${VERSION}.jar

DEFAULT_OPTS="-Xms512M -Xmx4G"
OPTS=""
ARGS=""
for arg in "$@" ; do
    case $arg in
        '-D'*|'-X'*) OPTS="$OPTS $arg" ;;
        *) ARGS="$ARGS $arg" ;;
    esac
done

if [ -z "$OPTS" ] ; then
    OPTS=$DEFAULT_OPTS
fi

java=java

# If Java is not on the path check if JAVA_HOME has been set.
if [ ! $(which java) ] ; then
    set +u
    if [ -z "$JAVA_HOME" ] ; then
        echo "Java does not appear to be installed on this system."
        exit 1
    fi
    java=${JAVA_HOME}/bin/java
fi

$java $OPTS -jar $JAR $ARGS


